package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"graph/model"
	"invites"
	"jwt"
	"stats"
	"users"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (string, error) {
	var user users.User
	user.Username = input.Name
	user.Password = input.Password

	if user.Create(input.Code) {
		token, err := jwt.GenerateToken(user.Username)
		if err != nil {
			return "", err
		}
		return token, nil
	}

	return "", &invites.InvalidInviteCodeError{}
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.UserInput) (string, error) {
	var user users.User
	user.Username = input.Name
	user.Password = input.Password
	correct := user.Authenticate()

	if !correct {
		return "", &users.WrongUsernameOrPasswordError{}
	}

	token, err := jwt.GenerateToken(user.Username)

	if err != nil {
		return "", err
	}

	return token, nil
}

// Self is the resolver for the self field.
func (r *queryResolver) Self(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Self - self"))
}

// Stats is the resolver for the stats field.
func (r *queryResolver) Stats(ctx context.Context) (*model.Stats, error) {
	return &model.Stats{
		Users:         stats.GetTotalUsers(),
		Organizations: stats.GetTotalOrganizations(),
		Projects:      0,
		Translations:  0,
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
